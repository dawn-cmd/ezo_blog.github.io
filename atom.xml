<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dawn-cmd.github.io</id>
    <title>Blog</title>
    <updated>2021-06-02T09:41:05.868Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dawn-cmd.github.io"/>
    <link rel="self" href="https://dawn-cmd.github.io/atom.xml"/>
    <subtitle>People who know nothing repeat it.
</subtitle>
    <logo>https://dawn-cmd.github.io/images/avatar.png</logo>
    <icon>https://dawn-cmd.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Blog</rights>
    <entry>
        <title type="html"><![CDATA[CS50 Web50 Week2: Python]]></title>
        <id>https://dawn-cmd.github.io/post/cs50-web50-week2-python/</id>
        <link href="https://dawn-cmd.github.io/post/cs50-web50-week2-python/">
        </link>
        <updated>2021-06-01T06:50:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="hello-world">Hello, world</h1>
<pre><code class="language-python">print(&quot;hello world&quot;)
</code></pre>
<ul>
<li>A holy ritual all the programmers need to do when they are learning a new programming laguage.<br>
<img src="https://dawn-cmd.github.io/post-images/1622530737137.png" alt="" loading="lazy"></li>
</ul>
<h1 id="variables">Variables</h1>
<pre><code class="language-python">def main():
    a = 28
    print(type(a))
    b = 1.5
    print(type(b))
    c = &quot;Hello&quot;
    print(type(c))
    d = True
    print(type(d))
    e = None
    print(type(e))


try:
    if (__name__ == &quot;__main__&quot;):
        main()
except(SystemExit):
    pass
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://dawn-cmd.github.io/post-images/1622531559923.png" alt="" loading="lazy"></figure>
<ul>
<li>Some basic types of variables.</li>
</ul>
<pre><code class="language-python">def main():
    name = input(&quot;name:&quot;)
    print(f&quot;Hello, {name}&quot;)
    print(&quot;Hello, &quot; + name)


try:
    if __name__ == &quot;__main__&quot;:
        main()
except(SystemExit):
    pass
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://dawn-cmd.github.io/post-images/1622532421415.png" alt="" loading="lazy"></figure>
<ul>
<li>How to use variables.</li>
<li>Two ways to combine strings. (fstring can only be used after python3.0)</li>
</ul>
<h1 id="conditions">Conditions</h1>
<pre><code class="language-python">def main():
    n = int(input(&quot;Number: &quot;))
    if n &gt; 0:
        print(&quot;The number is positive.&quot;)
    elif n &lt; 0:
        print(&quot;The number is negative.&quot;)
    else:
        print(&quot;The number is neither positive nor negative.&quot;)


try:
    if __name__ == &quot;__main__&quot;:
        main()
except(SystemExit):
    pass
</code></pre>
<ul>
<li>The use of &quot;if&quot; condition.</li>
<li>Take care the input function will return a string variable, not an int one. We need to use <code>int()</code> to change it.</li>
</ul>
<h1 id="sequence">Sequence</h1>
<pre><code class="language-python">def main():
    a = [1, 2, 3, 4, 5]
    print(type(a))
    s = &quot;name&quot;
    print(type(s))
    c = (10, 20)
    print(type(c))


try:
    if __name__ == &quot;__main__&quot;:
        main()
except(SystemExit):
    pass
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://dawn-cmd.github.io/post-images/1622533989949.png" alt="" loading="lazy"></figure>
<ul>
<li>Some data structures help us combine variables together.</li>
</ul>
<h1 id="list">List</h1>
<pre><code class="language-python">def main():
    a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]
    a.append(&quot;g&quot;)
    a.sort()
    print(a)


main()
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://dawn-cmd.github.io/post-images/1622534532775.png" alt="" loading="lazy"></figure>
<ul>
<li>We can use <code>append</code> to add things into a list.</li>
<li>A list can store different types of variables</li>
<li>If a list has different types of variables, we cannot use its <code>sort</code> function.</li>
</ul>
<h1 id="set">Set</h1>
<pre><code class="language-python">def main():
    s = set()  # Creat an empty set
    s.add(1)  # Add some numbers into it
    s.add(2)
    s.add(3)
    s.add(4)
    print(s)
    s.add(3)  # Add 3 again
    print(s)
    s.remove(2)
    print(s)
    print(f&quot;The set has {len(s)} elements&quot;)  # Show the use of len()


try:
    if __name__ == &quot;__main__&quot;:
        main()
except(SystemExit):
    pass
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://dawn-cmd.github.io/post-images/1622615106709.png" alt="" loading="lazy"></figure>
<ul>
<li>The element in set cannot be repeated.</li>
<li>We can use <code>add()</code> and <code>remove()</code> functions to change sets.</li>
<li>We can use <code>len()</code> to know the number of elements.</li>
</ul>
<h1 id="loop">Loop</h1>
<pre><code class="language-python">def main():
    for i in [0, 1, 2, 3, 4]:
        print(i, end = &quot; &quot;)
    print()
    for i in range(5):
        print(i, end = &quot; &quot;)
    print()
    names = [&quot;Amy&quot;, &quot;Klee&quot;, &quot;Jean&quot;]
    for i in names:
        print(i)
    print()
    name = &quot;Diluc&quot;
    for i in name:
        print(i, end = ' ')
    print()
    c = set()
    c.add('a')
    c.add('b')
    c.add('c')
    for i in c:
        print(i, end = ' ')
    print()

try:
    if __name__ == '__main__':
        main()
except(SystemExit):
    pass
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://dawn-cmd.github.io/post-images/1622616390620.png" alt="" loading="lazy"></figure>
<ul>
<li>Loop can be used in any kinds of sequence.</li>
</ul>
<h1 id="dictionary">Dictionary</h1>
<pre><code class="language-python">def main():
    area = {&quot;Venti&quot;: &quot;Monstared&quot;, &quot;Zhongli&quot;: &quot;Liyue&quot;}
    area[&quot;Keqing&quot;] = &quot;Liyue&quot;
    print(area[&quot;Venti&quot;])
    print(area[&quot;Zhongli&quot;])
    print(area[&quot;Keqing&quot;])

try:
    if __name__ == &quot;__main__&quot;:
        main()
except SystemExit:
    pass
</code></pre>
<ul>
<li>Each dict element has a key and a value. When we input the key, the dictionary can return us the proper value.</li>
</ul>
<h1 id="function">Function</h1>
<pre><code class="language-python">def square(x: int):
    return x * x

def main():
    for i in range(10):
        print(square(i), end = ' ')
    

try:
    if __name__ == &quot;__main__&quot;:
        main()
except SystemExit:
    pass
</code></pre>
<p>Function.py</p>
<pre><code class="language-python">from function import square

def main():
    for i in range(10):
        print(square(i))

try:
    if __name__ == &quot;__main__&quot;:
        main()
except SystemExit:
    pass
</code></pre>
<p>Square.py<br>
<img src="https://dawn-cmd.github.io/post-images/1622621864453.png" alt="" loading="lazy"></p>
<ul>
<li>It shows how to define a function and how to import it into another code.</li>
<li>If we import a whole file but not just a function, we need to add the file's name before we use it.</li>
</ul>
<h1 id="class">Class</h1>
<pre><code class="language-python">class point():
    
    def __init__(self, x, y) -&gt; None:
        self.x = x
        self.y = y

class Flight():

    def __init__(self, capacity) -&gt; None:
        self.capacity = capacity
        self.passengers = []

    def add_passengers(self, name):
        if self.open_seats() &gt; 0:
            self.passengers.append(name)
            return True
        return False

    def open_seats(self):
        return self.capacity - len(self.passengers)

def main():
    p = point(3.5, 4.0)
    print(p.x, p.y)
    abolo = Flight(3)
    visiters = [&quot;Diluc&quot;, &quot;Venti&quot;, &quot;Zhongli&quot;, &quot;Barer&quot;]
    for i in visiters:
        if abolo.add_passengers(i):
            print(f&quot;{i} has been in the flight.&quot;)
        else:
            print(&quot;There is no seats left.&quot;)

try:
    if __name__ == &quot;__main__&quot;:
        main()
except SystemExit:
    pass
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://dawn-cmd.github.io/post-images/1622621854098.png" alt="" loading="lazy"></figure>
<ul>
<li>The class with run the <code>__init__</code> function first when it is defined.</li>
<li>All the attributes start with <code>__</code> is not available outside the class itself (even its child classes)</li>
</ul>
<h1 id="decorator">Decorator</h1>
<pre><code class="language-python">def announcement(f):
    def wrapper():
        print(&quot;About to run the function...&quot;)
        f()
        print(&quot;Done with the function.&quot;)
    return wrapper

@announcement
def main():
    print(&quot;Hello World!!!&quot;)

try:
    if __name__ == &quot;__main__&quot;:
        main()
except SystemExit:
    pass
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://dawn-cmd.github.io/post-images/1622622599997.png" alt="" loading="lazy"></figure>
<ul>
<li>A decorator can be used in a web application to check a user is log in or not, or to make sure that the Internet connection is stable.</li>
</ul>
<h1 id="lambda">Lambda</h1>
<pre><code class="language-python">def main():
    people = [
        {&quot;name&quot;: &quot;Venti&quot;, &quot;area&quot;: &quot;Mondstadt&quot;},
        {&quot;name&quot;: &quot;Diluc&quot;, &quot;area&quot;: &quot;Mondstadt&quot;},
        {&quot;name&quot;: &quot;Hutao&quot;, &quot;area&quot;: &quot;Liyue&quot;},
        {&quot;name&quot;: &quot;Ganyu&quot;, &quot;area&quot;: &quot;Liyue&quot;}
    ]
    people.sort(key = lambda person: person[&quot;name&quot;])
    print(people)

try:
    if __name__ == &quot;__main__&quot;:
        main()
except SystemExit:
    pass
</code></pre>
<ul>
<li>Lambda function can be used to displace some small functions, like functions just return a value or expression, which can make the code clear and comprehensible.</li>
</ul>
<h1 id="exception">Exception</h1>
<pre><code class="language-python">from sys import exit

def main():
    try:
        x = int(input(&quot;x:&quot;))
        y = int(input(&quot;y:&quot;))
    except ValueError:
        print(&quot;Error: Invaild value.&quot;)
        exit(1)
    try:
        print(f&quot;x / y = {x / y}&quot;)
    except ZeroDivisionError:
        print(&quot;Error: cannot divide 0.&quot;)
        exit(1)

try:
    if __name__ == &quot;__main__&quot;:
        main()
except SystemExit:
    pass
</code></pre>
<ul>
<li>From my perspective, <code>try-except</code> command is used to inform users their problems in a human-understandable language. After all, not all users can understand the information given by the computer.</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CS50 Web50 Week1: Git]]></title>
        <id>https://dawn-cmd.github.io/post/cs50-web50-week1-git/</id>
        <link href="https://dawn-cmd.github.io/post/cs50-web50-week1-git/">
        </link>
        <updated>2021-05-31T01:15:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git">Git</h1>
<h2 id="function">Function</h2>
<ul>
<li>Keep track of changes to code.</li>
<li>Synchronizes code between different people.</li>
<li>Test changes to code without losing the original.</li>
<li>Revert back to old versions of code.</li>
</ul>
<h2 id="command">Command</h2>
<h3 id="1-git-clone">1. Git Clone</h3>
<pre><code class="language-git">git clone &lt;url&gt;
</code></pre>
<ul>
<li>It can help you download a repository from Github to your computer.</li>
</ul>
<h3 id="2-git-add">2. Git Add</h3>
<pre><code class="language-git">git add &lt;filename&gt;
</code></pre>
<ul>
<li>It can help you add one or more changes to the repository.</li>
</ul>
<h3 id="3-git-commit">3. Git Commit</h3>
<pre><code class="language-git">git commit -m &quot;&lt;message&gt;&quot;
</code></pre>
<ul>
<li>Make a commit to be pushed later.</li>
<li><code>&lt;message&gt;</code> is a description of the change</li>
</ul>
<h3 id="4-git-status">4. Git Status</h3>
<pre><code class="language-git">git status
</code></pre>
<ul>
<li>It can tell you the current situation.</li>
</ul>
<h3 id="5-git-push">5. Git Push</h3>
<pre><code class="language-git">git push
</code></pre>
<ul>
<li>Upload all changes online.</li>
</ul>
<h3 id="6-git-addcommit">6. Git Add+Commit</h3>
<pre><code class="language-git">git commit -am &quot;&lt;message&gt;&quot;
</code></pre>
<ul>
<li>Two in one.</li>
</ul>
<h3 id="7-git-pull">7. Git Pull</h3>
<pre><code class="language-git">git pull
</code></pre>
<ul>
<li>It can help you download the latest version from Internet.</li>
</ul>
<h3 id="8-merge-conflict">8. Merge Conflict</h3>
<p><img src="https://dawn-cmd.github.io/post-images/1622430120514.png" alt="" loading="lazy"><br>
<img src="https://dawn-cmd.github.io/post-images/1622525977111.png" alt="" loading="lazy"></p>
<h3 id="9-git-log">9. Git log</h3>
<figure data-type="image" tabindex="1"><img src="https://dawn-cmd.github.io/post-images/1622526353325.png" alt="" loading="lazy"></figure>
<h3 id="10git-reset">10.Git reset</h3>
<pre><code class="language-git">git reset --hard &lt;commit&gt;
git reset --hard oringin/master
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://dawn-cmd.github.io/post-images/1622526648954.png" alt="" loading="lazy"></figure>
<h3 id="11git-branch">11.Git branch</h3>
<pre><code class="language-git">git checkout -b &lt;branch&gt;
</code></pre>
<p>This command can help you switch to / create another branch.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CS50 Web50 Week0: HTML, CSS Notebook]]></title>
        <id>https://dawn-cmd.github.io/post/cs50-web50-week0-html-css/</id>
        <link href="https://dawn-cmd.github.io/post/cs50-web50-week0-html-css/">
        </link>
        <updated>2021-05-25T08:05:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="content-of-the-series-of-class">Content of the series of class:</h1>
<ul>
<li><a href="https://dawn-cmd.github.io/post/cs50-web50-week0-html-css/">HTML, CSS (make a web page)</a></li>
<li><a href="https://dawn-cmd.github.io/post/cs50-web50-week1-git/">Git (version control, team project)</a></li>
<li><a href="https://dawn-cmd.github.io/post/cs50-web50-week2-python/">Python (one of two main languages)</a></li>
<li>Django (frame of web application)</li>
<li>SQL, Models and Migration (data control)</li>
<li>JavaScript (two of two main languages)</li>
<li>Testing and CI/CD</li>
<li>Scalability and Security</li>
</ul>
<h1 id="html">HTML</h1>
<h2 id="the-very-first-html-code">The very first HTML code</h2>
<pre><code class="language-html">&lt;!--My very first HTML code--&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    Hello, html!
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://dawn-cmd.github.io/post-images/1621954884125.png" alt="" loading="lazy"></figure>
<ul>
<li><code>&lt;!DOCTYPE html&gt;</code> means this code should be interpreted by html5(the lasted version) syntax.</li>
<li><code>&lt;html&gt;</code> tag means it is the code we need to explain.</li>
<li><code>lang=en</code> means this page is written in English, which can help search engine to locate the page.</li>
<li><code>&lt;head&gt;</code> means this part is some additional information of the web page</li>
<li><code>&lt;title&gt;</code> means here is the title</li>
<li><code>&lt;body&gt;</code> means it is the visible part for users of the web page</li>
</ul>
<h2 id="tree-like-html-structure">Tree-like HTML structure:</h2>
<figure data-type="image" tabindex="2"><img src="https://dawn-cmd.github.io/post-images/1621931651507.png" alt="" loading="lazy"></figure>
<h2 id="headings">Headings</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Headings&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1&gt;This is a heading.&lt;/h1&gt;
    &lt;h2&gt;This is a smaller heading.&lt;/h2&gt;
    &lt;h6&gt;The smallest heading.&lt;/h6&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://dawn-cmd.github.io/post-images/1621954959058.png" alt="" loading="lazy"></figure>
<ul>
<li><code>&lt;h#&gt;</code> means the specific size of heading</li>
</ul>
<h2 id="lists">Lists</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Lists&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    An ordered List:
    &lt;ol&gt;
        &lt;li&gt;First item&lt;/li&gt;
        &lt;li&gt;Second item&lt;/li&gt;
        &lt;li&gt;Third item&lt;/li&gt;
    &lt;/ol&gt;
    An unordered List:
    &lt;ul&gt;
        &lt;li&gt;One item&lt;/li&gt;
        &lt;li&gt;Another item&lt;/li&gt;
        &lt;li&gt;Yet another item&lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://dawn-cmd.github.io/post-images/1621955018807.png" alt="" loading="lazy"></figure>
<ul>
<li><code>&lt;ol&gt;</code> means ordered list; <code>&lt;ul&gt;</code> means unordered list; <code>&lt;li&gt;</code> means list item.</li>
</ul>
<h2 id="image">Image</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;images&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;img src=&quot;https://tse2-mm.cn.bing.net/th/id/OIP.xEBcf_EEanvjFL_ChBHndgHaEK?pid=ImgDet&amp;rs=1&quot; alt=&quot;Cat&quot; width=300&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://dawn-cmd.github.io/post-images/1621955072233.png" alt="" loading="lazy"></figure>
<ul>
<li><code>&lt;img&gt;</code> means it is an image</li>
<li><code>src</code> means the url of the picture</li>
<li><code>alt</code> means the information displayed to audences</li>
<li><code>width</code> means the width of the picture</li>
</ul>
<h2 id="link">Link</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Link&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;a href=&quot;https://www.bing.com&quot;&gt;Click here&lt;/a&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://dawn-cmd.github.io/post-images/1621955131953.png" alt="" loading="lazy"></figure>
<ul>
<li><code>&lt;a&gt;</code> means it is a super link</li>
<li><code>href</code> represents the url of the link</li>
</ul>
<h2 id="table">Table</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Table&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;Ocean&lt;/th&gt;
                &lt;th&gt;Average Depth&lt;/th&gt;
                &lt;th&gt;Maximum Depth&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;Pacific Ocean&lt;/td&gt;
                &lt;td&gt;2121 m&lt;/td&gt;
                &lt;td&gt;8848 m&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;Atlantic Ocean&lt;/td&gt;
                &lt;td&gt;1000 m&lt;/td&gt;
                &lt;td&gt;114514 m&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://dawn-cmd.github.io/post-images/1621955186743.png" alt="" loading="lazy"></figure>
<ul>
<li><code>&lt;table&gt;</code> of course, a table</li>
<li><code>&lt;thead&gt;</code> the first row of the table, include some introductory information</li>
<li><code>&lt;tbody&gt;</code> information</li>
<li><code>&lt;tr&gt;</code> table row</li>
<li><code>&lt;td&gt;</code> table data</li>
</ul>
<h2 id="form">Form</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Form&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;form&gt;
        &lt;div&gt;
            &lt;input type=&quot;text&quot; placeholder=&quot;Full name&quot; name=&quot;name&quot;&gt;
            &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; name=&quot;password&quot;&gt;
        &lt;/div&gt;
        &lt;div&gt;
            Favourite color?
            &lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;red&quot;&gt; Red
            &lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;green&quot;&gt; Green
            &lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;blue&quot;&gt; Blue
        &lt;/div&gt;
        &lt;div&gt;
            &lt;input name=&quot;country&quot; list=&quot;countries&quot; placeholder=&quot;country&quot;&gt;
            &lt;datalist id=&quot;countries&quot;&gt;
                &lt;option value=&quot;A country&quot;&gt;&lt;/option&gt;
                &lt;option value=&quot;B country&quot;&gt;&lt;/option&gt;
                &lt;option value=&quot;C counrty&quot;&gt;&lt;/option&gt;
                &lt;option value=&quot;D country&quot;&gt;&lt;/option&gt;
            &lt;/datalist&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;input type=&quot;submit&quot;&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://dawn-cmd.github.io/post-images/1621955243781.png" alt="" loading="lazy"></figure>
<ul>
<li><code>&lt;form&gt;</code> form</li>
<li><code>&lt;input&gt;</code> the place where users input informaiton to the website</li>
<li><code>type</code> show what the user will input</li>
<li><code>placeholder</code> let users know how to do with the textbox</li>
<li><code>name</code> the variable that hold the information</li>
<li><code>radio</code> means the choosing one among these answers</li>
</ul>
<h1 id="css">CSS</h1>
<h2 id="style">Style</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1 style=&quot;color: red; text-align: center;&quot;&gt;Welcome to my page!&lt;/h1&gt;
    Hello, html!
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://dawn-cmd.github.io/post-images/1622018313931.png" alt="" loading="lazy"></figure>
<ul>
<li><code>style</code> means the style attribute of this tag</li>
</ul>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        h1 {
            color: blue;
            text-align: center;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1&gt;Welcome to my page!&lt;/h1&gt;
    &lt;h1&gt;This is another title.&lt;/h1&gt;
    Hello, html!
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<ul>
<li>We can also use <code>&lt;style&gt;</code> tag in <code>&lt;head&gt;</code> tag to simplify the process like this.</li>
</ul>
<ol>
<li>styles.css:</li>
</ol>
<pre><code class="language-css">h1 {
    color: red;
    text-align: center;
}
</code></pre>
<ol start="2">
<li>style.html:</li>
</ol>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1&gt;Welcome to my page!&lt;/h1&gt;
    &lt;h1&gt;This is another title.&lt;/h1&gt;
    Hello, html!
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<ul>
<li>We can use this method to simplify the code body even more.</li>
</ul>
<h2 id="size">Size</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        div {
            background-color: aqua;
            width: 300px;
            height: 400px;
            padding: 20px;
            margin: 20px;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div&gt;
        hello world!!!
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<p><img src="https://dawn-cmd.github.io/post-images/1622022480535.png" alt="" loading="lazy"><br>
This code shows some attributes that control the size in CSS.</p>
<h2 id="font">Font</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Font&lt;/title&gt;
    &lt;style&gt;
        div {
            font-family: Arial, Helvetica, sans-serif;
            font-size: 28px;
            font-weight: bold;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div&gt;
        Hello,html!!!
    &lt;/div&gt;
    Hello,html!!!
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://dawn-cmd.github.io/post-images/1622030118236.png" alt="" loading="lazy"></figure>
<ul>
<li>This code shows how to set font for web page.</li>
</ul>
<h2 id="border">Border</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Table&lt;/title&gt;
    &lt;style&gt;
        table {
            border-collapse: collapse;
            border: 1px solid black;
        }

        th,
        td {
            border: 1px solid black;
            padding: 5px;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;Ocean&lt;/th&gt;
                &lt;th&gt;Average Depth&lt;/th&gt;
                &lt;th&gt;Maximum Depth&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;Pacific Ocean&lt;/td&gt;
                &lt;td&gt;2121 m&lt;/td&gt;
                &lt;td&gt;8848 m&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;Atlantic Ocean&lt;/td&gt;
                &lt;td&gt;1000 m&lt;/td&gt;
                &lt;td&gt;114514 m&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="11"><img src="https://dawn-cmd.github.io/post-images/1622032432255.png" alt="" loading="lazy"></figure>
<ul>
<li>It also reveals how to use border-collapse and multiple selector.</li>
</ul>
<h2 id="class-id">Class, Id</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        h1 {
            color: green;
        }

        .foo {
            color: blue;
        }

        #hpq {
            color: red;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1 class=&quot;foo&quot;&gt;Heading 1&lt;/h1&gt;
    &lt;h1 class=&quot;foo&quot;&gt;Heading 2&lt;/h1&gt;
    &lt;h1 id=&quot;hpq&quot;&gt;Heading 3&lt;/h1&gt;
    &lt;h1&gt;Heading 4&lt;/h1&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="12"><img src="https://dawn-cmd.github.io/post-images/1622033816305.png" alt="" loading="lazy"></figure>
<ul>
<li>It tells us how to use id, class and type and their priorities.</li>
</ul>
<h2 id="selectors">Selectors</h2>
<figure data-type="image" tabindex="13"><img src="https://dawn-cmd.github.io/post-images/1622035016803.png" alt="" loading="lazy"></figure>
<h3 id="1-descedant-selector">1. descedant selector</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        ul li {
            color: red;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;ol&gt;
        &lt;li&gt;list item 1&lt;/li&gt;
        &lt;li&gt;list item 2&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;ul item A&lt;/li&gt;
            &lt;li&gt;ul item B&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;list item 3&lt;/li&gt;
    &lt;/ol&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="14"><img src="https://dawn-cmd.github.io/post-images/1622035815525.png" alt="" loading="lazy"></figure>
<ul>
<li>Descedant selector will also choose the son tag and grandson tag and so on, which child selector will not do.</li>
</ul>
<h3 id="2-attribute-selector">2. attribute selector</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        a {
            color: blue;
        }

        a[href=&quot;https://youtube.com&quot;] {
            color: red;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://google.com&quot;&gt;Google&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://youtube.com&quot;&gt;YouTube&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://amazon.com&quot;&gt;Amazon&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="15"><img src="https://dawn-cmd.github.io/post-images/1622104334166.png" alt="" loading="lazy"></figure>
<ul>
<li>We can write <code>tag[attribute]</code> to select a tag with specific attribute.</li>
</ul>
<h3 id="3-hover-selector">3. hover selector</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        button {
            width: 200px;
            height: 50px;
            font-size: 24px;
            background-color: aqua;
        }

        button:hover {
            background-color: purple;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;button&gt;Click me!!!&lt;/button&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<ul>
<li>
<p>Not Hovered<br>
<img src="https://dawn-cmd.github.io/post-images/1622104850799.png" alt="" loading="lazy"></p>
</li>
<li>
<p>Hovered<br>
<img src="https://dawn-cmd.github.io/post-images/1622104871893.png" alt="" loading="lazy"></p>
</li>
</ul>
<h2 id="responsive">Responsive</h2>
<h3 id="1-media-queries">1. Media Queries</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        @media (min-width: 600px) {
            body {
                background-color: red;
            }
        }

        @media (max-width: 599px) {
            body {
                background-color: blue;
            }
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1&gt;Welcome to my web page.&lt;/h1&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<p><img src="https://dawn-cmd.github.io/post-images/1622105519517.png" alt="" loading="lazy"><br>
<img src="https://dawn-cmd.github.io/post-images/1622105526707.png" alt="" loading="lazy"></p>
<h3 id="2-flexbox">2. Flexbox</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        #container {
            display: flex;
            flex-wrap: wrap;
        }

        #container&gt;div {
            background-color: purple;
            margin: 20px;
            font-size: 20px;
            padding: 20px;
            width: 200px;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id=&quot;container&quot;&gt;
        &lt;div&gt;1. This is a sample.&lt;/div&gt;
        &lt;div&gt;2. This is a sample.&lt;/div&gt;
        &lt;div&gt;3. This is a sample.&lt;/div&gt;
        &lt;div&gt;4. This is a sample.&lt;/div&gt;
        &lt;div&gt;5. This is a sample.&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="16"><img src="https://dawn-cmd.github.io/post-images/1622106679927.png" alt="" loading="lazy"></figure>
<h3 id="3-grid">3. Grid</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;style&gt;
        #grid {
            background-color: purple;
            display: grid;
            padding: 20px;
            grid-column-gap: 20px;
            grid-row-gap: 10px;
            grid-template-columns: 200px 200px auto;
        }

        .grid-item {
            background-color: white;
            font-size: 20px;
            padding: 20px;
            text-align: center;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id=&quot;grid&quot;&gt;
        &lt;div class=&quot;grid-item&quot;&gt;1&lt;/div&gt;
        &lt;div class=&quot;grid-item&quot;&gt;2&lt;/div&gt;
        &lt;div class=&quot;grid-item&quot;&gt;3&lt;/div&gt;
        &lt;div class=&quot;grid-item&quot;&gt;4&lt;/div&gt;
        &lt;div class=&quot;grid-item&quot;&gt;5&lt;/div&gt;
        &lt;div class=&quot;grid-item&quot;&gt;6&lt;/div&gt;
        &lt;div class=&quot;grid-item&quot;&gt;7&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://dawn-cmd.github.io/post-images/1622110165338.png" alt="" loading="lazy"></figure>
<h3 id="4-bootstrap">4. Bootstrap</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;
        integrity=&quot;sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x&quot; crossorigin=&quot;anonymous&quot;&gt;
&lt;/head&gt;

&lt;body&gt;
    Hello, html!
    &lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
        Here is my alert!
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="18"><img src="https://dawn-cmd.github.io/post-images/1622122003190.png" alt="" loading="lazy"></figure>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;Hello, html!&lt;/title&gt;
    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;
        integrity=&quot;sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x&quot; crossorigin=&quot;anonymous&quot;&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col-3&quot;&gt;
                This is a section.
            &lt;/div&gt;
            &lt;div class=&quot;col-3&quot;&gt;
                This is another section.
            &lt;/div&gt;
            &lt;div class=&quot;col-3&quot;&gt;
                This is a third section.
            &lt;/div&gt;
            &lt;div class=&quot;col-3&quot;&gt;
                This is a forth section.
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="19"><img src="https://dawn-cmd.github.io/post-images/1622122531755.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu P1020 [NOIP1999 Junior] System]]></title>
        <id>https://dawn-cmd.github.io/post/luogu-p1020-noip1999-junior-missile-interception-system/</id>
        <link href="https://dawn-cmd.github.io/post/luogu-p1020-noip1999-junior-missile-interception-system/">
        </link>
        <updated>2021-04-21T07:52:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><a href="https://www.luogu.com.cn/problem/P1020">Raw Link</a><br>
A country has developed a missile interception system in order to defend against enemy missile attacks. However, this system has a flaw: although its first shell can reach any height, each subsequent shell cannot be higher than the previous one. One day, the radar caught an enemy missile attack. Since the system is still in the trial phase, there is only one system, so it may not be able to intercept all missiles.</p>
<p>Enter the altitude of the missiles in turn (the altitude data given by the radar is a positive integer ≤50,000), calculate the maximum number of missiles that this system can intercept, and how many sets of such missile interception systems are required to intercept all missiles.</p>
<h2 id="input">Input</h2>
<p>1 line, several integers (number ≤ 100000)</p>
<h2 id="output">Output</h2>
<p>2 lines, each line contains an integer. The first number indicates the maximum number of missiles that this system can intercept, and the second number indicates the minimum number of missile interception systems required to intercept all missiles.</p>
<h2 id="code">Code</h2>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
struct Data {
    vector&lt;int&gt; h;
    int n;
};
void init(Data &amp;d) {
    int tmp;
    d.n = 0;
    while(cin &gt;&gt; tmp) {
        d.n++;
        d.h.push_back(tmp);
    }
}
int problem1(Data &amp;d) {
    vector&lt;int&gt; mst;  // Monotone-Stack 
    mst.push_back(d.h[0]);
    for(int i = 1; i &lt; d.n; ++i) {
        if(mst[mst.size() - 1] &gt;= d.h[i]) {
            mst.push_back(d.h[i]);
            continue;
        }
        int p = upper_bound(mst.begin(), mst.end(), d.h[i], greater&lt;int&gt; ()) - mst.begin();
        mst[p] = d.h[i];
    }
    return mst.size();
}
int problem2(Data &amp;d) {
    vector&lt;int&gt; mst;
    mst.push_back(d.h[0]);
    for(int i = 1; i &lt; d.n; ++i) {
        if(d.h[i] &gt; mst[mst.size() - 1]) {
            mst.push_back(d.h[i]);
        }
        int p = lower_bound(mst.begin(), mst.end(), d.h[i]) - mst.begin();
        mst[p] = d.h[i];
    }
    return mst.size();
}
int main() {
    Data d;
    init(d);
    cout &lt;&lt; problem1(d) &lt;&lt; endl;
    cout &lt;&lt; problem2(d) &lt;&lt; endl;
    return 0;
}
</code></pre>
<h2 id="tutorial">Tutorial</h2>
<p>Actually, it is a well-known DP problem in Chinese competition cause it is the first linear DP in NOIP junior. From my perspective, it is an excellent problem in that it combines several practical technologys in computer science and control the amount of code so competitors can focus on their ideas.</p>
<p>First, we need a main idea, or structure of the solution. In this problem, we use dp[i] to represent if the last missile the syetem intercept is i, the number of missiles it can intercept. We can get this transformation function:</p>
<p><code>dp[i] = max(dp[j] + 1) (1 &lt;= j &lt;= i - 1, h[j] &gt;= h[i]),</code><br>
<code>dp[i] = 1 (h[i] &gt; h[j], j is in [1, i - 1] or i = 1)</code></p>
<p>However, if we just actualize this function, we will find that the time compexity is O(n^2). With the range of 50,000, it is not swift enough to make sure it can get the answer in 1s. There is a burden that to each i we need to use O(n) to find the largest dp[j] that h[j] &gt;= h[i]. We can imitate <code>Bucket Sort</code> to use dp[i] as the subscript of an array and mantain it as an descending sequence. So we just need to find from the behind each time.</p>
<p>But in some extreme situation, this method will deteriorate to O(n^2) again. Hence, we need a determinate optimization. We can use <code>binary search</code> on the perivous step to actually make the time complexity be shortened into O(logn). For convenience, I use C++ stl's lower_bound and upper_bound functions. In the end, the solution will have an O(nlogn) time complexity, this is want we want.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces Round #715 (Div. 2) Problem C]]></title>
        <id>https://dawn-cmd.github.io/post/codeforces-round-715-div-2-problem-3/</id>
        <link href="https://dawn-cmd.github.io/post/codeforces-round-715-div-2-problem-3/">
        </link>
        <updated>2021-04-19T13:23:33.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://dawn-cmd.github.io/post-images/1618839656366.png" alt="" loading="lazy"></figure>
<h2 id="introdution">Introdution</h2>
<p><a href="https://codeforces.com/contest/1509/problem/C">Raw Link</a><br>
The student council is preparing for the relay race at the sports festival.</p>
<p>The council consists of n members. They will run one after the other in the race, the speed of member i is si. The discrepancy di of the i-th stage is the difference between the maximum and the minimum running speed among the first i members who ran. Formally, if ai denotes the speed of the i-th member who participated in the race, then di=max(a1,a2,…,ai)−min(a1,a2,…,ai).</p>
<p>You want to minimize the sum of the discrepancies d1+d2+⋯+dn. To do this, you are allowed to change the order in which the members run. What is the minimum possible sum that can be achieved?</p>
<h2 id="input">Input</h2>
<p>The first line contains a single integer n (1≤n≤2000)  — the number of members of the student council.</p>
<p>The second line contains n integers s1,s2,…,sn (1≤si≤109)  – the running speeds of the members.</p>
<h2 id="output">Output</h2>
<p>Print a single integer  — the minimum possible value of d1+d2+⋯+dn after choosing the order of the members.</p>
<h2 id="code">Code</h2>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
struct Data {
    int n;
    vector&lt;long long&gt; s;
    vector&lt;vector&lt;long long&gt; &gt; mem;
};
void init(Data &amp;d) {
    cin &gt;&gt; d.n;
    d.s = vector&lt;long long&gt;(d.n);
    for(int i = 0; i &lt; d.n; ++i) {
        cin &gt;&gt; d.s[i];
    }
    sort(d.s.begin(), d.s.end());
    d.mem = vector&lt;vector&lt;long long&gt; &gt;(d.n);
    for(int i = 0; i &lt; d.n; ++i) {
        d.mem[i] = vector&lt;long long&gt;(d.n);
        fill(d.mem[i].begin(), d.mem[i].end(), -1);
    }
}
long long dp(int l, int r, Data &amp;d) {
    if(d.mem[l][r] != -1) {
        return d.mem[l][r];
    }
    if(l == r) {
        return 0;
    }
    return d.mem[l][r] = d.s[r] - d.s[l] + min(dp(l + 1, r, d), dp(l, r - 1, d));
}
int main() {
    Data d;
    init(d);
    cout &lt;&lt; dp(0, d.n - 1, d) &lt;&lt; endl; 
    return 0;
}
</code></pre>
<h2 id="explanation">Explanation</h2>
<p>To solve the problem, we need a handle to enter it. If we try to play this process from end to the beginning, we will find that the last one added is the largest or smallest one among them. Cause it will increase di earlier if it is put in a early time.</p>
<p>So we can get the dp function that dp(i, j) = sj - si + max(dp(i + 1, j), dp(i, j - 1)), dp(i, i) = 0.</p>
<p>We can use memorization to make sure that the time complexity is in O(n^2).</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces Round #715 (Div. 2) Problem B]]></title>
        <id>https://dawn-cmd.github.io/post/codeforces-round-715-div-2-problem-b/</id>
        <link href="https://dawn-cmd.github.io/post/codeforces-round-715-div-2-problem-b/">
        </link>
        <updated>2021-04-18T00:29:43.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://dawn-cmd.github.io/post-images/1618705814373.png" alt="" loading="lazy"></figure>
<h2 id="introduction">Introduction</h2>
<p><a href="https://codeforces.com/contest/1509/problem/B">Raw Link</a><br>
The student council has a shared document file. Every day, some members of the student council write the sequence TMT (short for Towa Maji Tenshi) in it.</p>
<p>However, one day, the members somehow entered the sequence into the document at the same time, creating a jumbled mess. Therefore, it is Suguru Doujima's task to figure out whether the document has malfunctioned. Specifically, he is given a string of length n whose characters are all either T or M, and he wants to figure out if it is possible to partition it into some number of disjoint subsequences, all of which are equal to TMT. That is, each character of the string should belong to exactly one of the subsequences.</p>
<p>A string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero) characters.</p>
<h2 id="input-form">Input Form</h2>
<p>The first line contains an integer t (1 ≤ t ≤ 5000)  — the number of test cases.</p>
<p>The first line of each test case contains an integer n (3 ≤ n &lt; 10^5), the number of characters in the string entered in the document. It is guaranteed that n is divisible by 3.</p>
<p>The second line of each test case contains a string of length n consisting of only the characters T and M.</p>
<p>It is guaranteed that the sum of n over all test cases does not exceed 10^5.</p>
<h2 id="output-form">Output Form</h2>
<p>For each test case, print a single line containing <code>YES</code> if the described partition exists, and a single line containing <code>NO</code> otherwise.</p>
<h2 id="code">Code</h2>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
struct Data {
    int n;
    string s;
    int m_num;
    int t_num;
};
void init(Data &amp;d) {
    cin &gt;&gt; d.n;
    cin &gt;&gt; d.s;
    d.m_num = 0;
    d.t_num = 0;
}
int main() {
    int t;
    cin &gt;&gt; t;
    while(t--) {
        Data d;
        init(d);
        bool ans = 1;
        for(int i = 0; i &lt; d.s.size(); ++i) {
            if(d.s[i] == 'M') {
                d.m_num += 1;
            }
            else{
                d.t_num += 1;
            }
            if(d.m_num &gt; d.t_num) {
                ans = 0;
                break;
            }
        }
        if(!ans) {
            cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;
            continue;
        }
        d.m_num = 0;
        d.t_num = 0;
        for(int i = d.s.size() - 1; i &gt;= 0; --i) {
            if(d.s[i] == 'M') {
                d.m_num += 1;
            }
            else{
                d.t_num += 1;
            }
            if(d.m_num &gt; d.t_num) {
                ans = 0;
                break;
            }
        }
        if(d.m_num * 2 != d.t_num) {
            ans = 0;
        }
        if(!ans) {
            cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;
        }
        else{
            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;
        }
    }
    return 0;
}
</code></pre>
<h2 id="explanation">Explanation</h2>
<p>If we translate the problem, we will find that all the requirements turns into two rules:</p>
<ol>
<li>Check the string from left to right and right to left, the number of M should not exceed the number of T at any time.</li>
<li>The number of T should be the double of number of M</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces Round #715 (Div. 2) Problem A]]></title>
        <id>https://dawn-cmd.github.io/post/codeforces-round-715-div-2-problem-a/</id>
        <link href="https://dawn-cmd.github.io/post/codeforces-round-715-div-2-problem-a/">
        </link>
        <updated>2021-04-17T00:43:09.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://dawn-cmd.github.io/post-images/1618620382440.png" alt="" loading="lazy"></figure>
<h2 id="introduction">Introduction</h2>
<p><a href="https://codeforces.com/contest/1509/problem/A">Raw Link</a><br>
Sayaka Saeki is a member of the student council, which has n other members (excluding Sayaka). The i-th member has a height of ai millimeters.</p>
<p>It's the end of the school year and Sayaka wants to take a picture of all other members of the student council. Being the hard-working and perfectionist girl as she is, she wants to arrange all the members in a line such that the amount of photogenic consecutive pairs of members is as large as possible.</p>
<p>A pair of two consecutive members u and v on a line is considered photogenic if their average height is an integer, (u + v) / 2 is an integer.</p>
<p>Help Sayaka arrange the other members to maximize the number of photogenic consecutive pairs.</p>
<h2 id="input-form">Input Form</h2>
<p>The first line contains a single integer t (1≤t≤500) — the number of test cases.</p>
<p>The first line of each test case contains a single integer n (2≤n≤2000)  — the number of other council members.</p>
<p>The second line of each test case contains n integers a1, a2, ..., an (1≤ai≤2⋅10^5)  — the heights of each of the other members in millimeters.</p>
<p>It is guaranteed that the sum of n over all test cases does not exceed 2000.</p>
<h2 id="output-form">Output Form</h2>
<p>For each test case, output on one line n integers representing the heights of the other members in the order, which gives the largest number of photogenic consecutive pairs. If there are multiple such orders, output any of them.</p>
<h2 id="code">Code</h2>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
struct Data {
    int n;
    vector&lt;int&gt; h_odd;
    vector&lt;int&gt; h_even;
};
void init(Data &amp;d) {
    cin &gt;&gt; d.n;
    for(int i = 0; i &lt; d.n; ++i) {
        int tmp;
        cin &gt;&gt; tmp;
        if(tmp &amp; 1) {
            d.h_odd.push_back(tmp);
        }
        else{
            d.h_even.push_back(tmp);
        }
    }
}
int main() {
    int t;
    cin &gt;&gt; t;
    while(t--) {
        Data d;
        init(d);
        for(auto i : d.h_odd) {
            cout &lt;&lt; i &lt;&lt; ' ';            
        }
        for (auto i : d.h_even) {
            cout &lt;&lt; i &lt;&lt; ' '; 
        }
        cout &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
<h2 id="explanation">Explanation</h2>
<p>Obviously, if a consecutive pair of members is considered photogenic, their heights must be all odd or even, otherwise u + v cannot divided by 2 with a integer. Hence, we just need to do is to make sure that all men with odd heights were stand together, even as well.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu P2196 [NOIP1996 senior] Dig Landmines]]></title>
        <id>https://dawn-cmd.github.io/post/luogu-p2196-noip1996-senior-dig-landmines/</id>
        <link href="https://dawn-cmd.github.io/post/luogu-p2196-noip1996-senior-dig-landmines/">
        </link>
        <updated>2021-04-15T23:26:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><a href="https://www.luogu.com.cn/problem/P2196">Raw Link</a><br>
There are N cellars (N≤20) on a map, and a certain number of mines are buried in each cellar. At the same time, give the connection path between the cellars. After the data of the cellar and its connection are given, someone can start digging mines from any place, and then dig down along the indicated connection (only one path can be selected), and the mine digging work ends when there is no connection. Design a plan for digging mines so that someone can dig the most mines.</p>
<h2 id="input-form">Input Form</h2>
<p>There are several lines.</p>
<p>There is only one number in the first line, which represents the number of cellars N.</p>
<p>There are N numbers in the second line, which respectively indicate the number of mines in each cellar.</p>
<p>Lines 3 to N+1 indicate the connection between the cellars:</p>
<p>There are n−1 numbers (0 or 1) in the third row, indicating whether there is a path connection from the first cellar to the second, third, ..., nth cellar. For example, the third line is 11000...0, it means that there is a path from the first cellar to the second cellar, there is a path to the third cellar, and there is no path to the fourth cellar, the fifth, ..., the nth cellar.</p>
<p>There are n−2 numbers in the 4th row, indicating whether there is a path connection from the second cellar to the third, fourth, ..., nth cellar.</p>
<p>There is 1 number in the n+1th row, indicating whether there is a path connection between the n−1th cellar and the nth cellar. (0 means there is no path, 1 means there is a path).</p>
<h2 id="output-form">Output Form</h2>
<p>There are two lines</p>
<p>The first line indicates the order of mine digging when the most mines are dug. The serial numbers of each cell are separated by a space, and there must be no extra spaces.</p>
<p>There is only one number in the second row, indicating the maximum number of mines that can be dug.</p>
<h2 id="code">Code</h2>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
void init(int &amp;n, int (&amp;g)[50][50], int (&amp;v)[50], int sum) {
    cin &gt;&gt; n;
    for(int i =1; i &lt;= n; ++i) {
        cin &gt;&gt; v[i];
    }
    for(int i = 1; i &lt;= n - 1; ++i)
        for(int j = i + 1; j &lt;= n; ++j){
            int tmp;
            cin &gt;&gt; tmp;
            g[i][j] = tmp;
        }
    for(int i = 1; i &lt;= n; ++i) {
        g[0][i] = 1;
    }
    v[0] = 0;
}
struct Data {
    int h[50];
    int g[50][50];
    int v[50];
    int n;
    int sum = 0;
    int max_sum = -1;
    vector&lt;int&gt; path;
    vector&lt;int&gt; ans_path;
};
int dp(int now, Data &amp;data) {
    if(data.h[now] == 1) {
        return 0;
    }
    data.h[now] = 1;
    int maxn = -1;
    data.sum += data.v[now];
    data.path.push_back(now);
    for (int i = 1; i &lt;= data.n; ++i) {
        if(data.g[now][i] == 0 || i == now || data.h[i] == 1) {
            continue;
        }
        int tmp = dp(i, data);
        maxn = max(maxn, tmp);
    }
    if(maxn == -1 &amp;&amp; data.sum &gt; data.max_sum) {
        data.max_sum = data.sum;
        data.ans_path = data.path;
    }
    data.sum -= data.v[now];
    data.h[now] = 0;
    data.path.pop_back();
    return data.v[now] + max(maxn, 0);
}
int main() {
    Data data;
    init(data.n,data.g,data.v, data.sum);
    int ans = dp(0, data);
    for(int i = 1; i &lt; data.ans_path.size(); ++i) {
        cout &lt;&lt; data.ans_path[i] &lt;&lt; ' ';
    }
    cout &lt;&lt; endl;
    cout &lt;&lt; ans &lt;&lt; endl;
    return 0;
}
</code></pre>
<h2 id="explanation">Explanation</h2>
<ol>
<li>It has the characteristics of graph theory.</li>
<li>The data range is very small (N \le 20) (N ≤ 20), and you can make &quot;exotic&quot; attempts.</li>
<li>It is necessary to output the route and the maximum solution result, which can be combined to reduce the amount of code.</li>
<li>Use pre to record the predecessor of the selected point in the reasonable scheme, and recursively output. (You can also use a while loop, given in the next method)</li>
<li>Obviously it is impossible to find the answer simply, so the state is designed to facilitate the transfer. Let f[i]f[i] represent the maximum number of mines dug from the starting point to the point ii. When i and j are connected, f[j ] (Another point, enumerate it) When the maximum value is reached, the recursive formula f[i]=max(f[j])+mine<a href="map%5Bj,i%5D=1">i</a> is obtained.</li>
<li>Be sure to note the last point on the path to output it recursively.</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu P1216 Number Triangles]]></title>
        <id>https://dawn-cmd.github.io/post/luogu-p1216-number-triangles/</id>
        <link href="https://dawn-cmd.github.io/post/luogu-p1216-number-triangles/">
        </link>
        <updated>2021-04-15T15:54:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><a href="https://www.luogu.com.cn/problem/P1216">Raw Link</a><br>
Write a program to find the path from the highest point to the bottom anywhere, so that the path passes through the largest sum of numbers. Each step can go to the bottom left point or the bottom right point.<br>
7<br>
3   8<br>
8   1   0<br>
2   7   4   4<br>
4   5   2   6   5<br>
In the above example, the path from 7→3→8→7→7→3→8→7→5 produces the largest one.</p>
<h2 id="input-form">Input Form</h2>
<p>The first line is a positive integer rr, which indicates the number of lines.</p>
<h2 id="output-form">Output Form</h2>
<p>A single line containing the largest sum possible.</p>
<h2 id="notice">Notice</h2>
<p>For 100% data,1≤r≤1000, all inputs are in the range of [0,100].</p>
<h2 id="code">Code</h2>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int main() {
    int r;
    cin &gt;&gt; r;
    vector&lt;vector&lt;int&gt;&gt; graph(r);
    for (int i = 0; i &lt; r; ++i) {
        graph[i] = vector&lt;int&gt;(i + 1);
        for (int j = 0; j &lt; i + 1; ++j) 
            cin &gt;&gt; graph[i][j];
    }
    vector&lt;vector&lt;int&gt;&gt; dp(r);
    for (int i = 0; i &lt; r; ++i)
        for (int j = 0; j &lt; i + 1; ++j) 
            dp[i].push_back(0);
    dp[0][0] = graph[0][0];
    for (int i = 1; i &lt; r; ++i)
        for (int j = 0; j &lt; i + 1; ++j) {
            if (j == 0) {
                dp[i][j] = dp[i - 1][j] + graph[i][j];
                continue;
            }
            if (j == i) {
                dp[i][j] = dp[i - 1][j - 1] + graph[i][j];
                continue;
            }
            dp[i][j] = graph[i][j] + max(dp[i - 1][j], dp[i - 1][j - 1]);
        }
    int ans = 0;
    for (int i = 0; i &lt; r; ++i)
        ans = max(ans, dp[r - 1][i]);
    cout &lt;&lt; ans &lt;&lt; endl;
    return 0;
}
</code></pre>
<h2 id="explanation">Explanation</h2>
<p>This question is a dp introductory mention in many textbooks, and the idea is that it is a naked dp.</p>
<p>Let f[i][j] represent the maximum sum from (1,1) to (i,j), then f[i][j]=max(f[i-1][j],f[i- 1][j-1])+a[i][j] Because the point (i,j) can only come from two points (i-1,j) and (i-1,j-1), So take the maximum of the two of them + the number at this point.</p>
<p>In fact, the dp array f of this question can be optimized to O(n), but it doesn't make much sense: the first will not exceed the memory anyway, and the second a must already be two-dimensional. In fact, the a array can also be optimized as a one-dimensional, but it won't exceed the memory anyway, just ignore it.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introduction of Dynamic Programming]]></title>
        <id>https://dawn-cmd.github.io/post/introduction-of-dynamic-programming/</id>
        <link href="https://dawn-cmd.github.io/post/introduction-of-dynamic-programming/">
        </link>
        <updated>2021-04-10T01:05:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="about-this-article">About this article</h2>
<p>This time let's talk about a critical part of algorithm: Dynamic Programming(DP). Actually, I wanted to write about it for a long time. However, its complexity makes me cannot start writing until now. Cause instead of a specific method, DP is more like a system of methods, or a special angle to see the problems. This time we will introduce DP in general and unfold each specific point in the future.</p>
<h2 id="basic-introduction">Basic introduction</h2>
<p>We often see problems that seems periodic or consisted of several similar sub-problems are hard to solve directly, like the famous Fibonacci Sequence. Although we all know that the sequence has a direct function, most people are more familiar with this: f(n) = f(n - 1) + f(n - 2), which is more clear and practicable. This is a typical example of DP, which has direct <code>&quot;optimal substructures&quot;</code> and <code>&quot;recursive sub-problems&quot;</code>. &quot;Optimal substructure&quot; means the optimal solution of this problem can totally inferred from its subproblems optimal solutions. &quot;Recursive subproblems&quot; means the problem itself is similar to its subproblems in general.</p>
<h2 id="common-structure">Common structure</h2>
<p>Before we actually practice it in problems, we need to understand the common steps to make sure we have a clear direction.</p>
<p>All DP solutions are consisted of three parts: <code>Level</code>, <code>State</code>, and <code>State Transformation Functions</code>:</p>
<ul>
<li>
<p>Level: The basic unit we want to divide the problem into. In Fibonacci Sequence problem, each position in the sequence is the level we define. Interestingly, many problems have several different DP solution depended on the choice of level, and the time compexity and difficulty of practicing will change as well.</p>
</li>
<li>
<p>State: Specific data the level has. In equations, we often use varibles like i, j, and k to represent state. Yet in some special situations, the state will give a answer that does not follow the other's rule, for example, the border limitation.</p>
</li>
<li>
<p>State Transformation Function: The core function of a DP solution. It directly represents how optimal solution of the problem can be inferred from the optimal solutions of its subproblems.</p>
</li>
</ul>
<h2 id="example-fibonacci-sequence">Example: Fibonacci Sequence</h2>
<p>In this example, I will show two basic methods of actualizing DP.</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int dp(int k) {
    if(k == 0) return 0;
    if(k == 1) return 1;
    return dp(k - 1) + dp(k - 2);
} 
int main() {
    int n;
    cin &gt;&gt; n;
    cout &lt;&lt; dp(n) &lt;&lt; endl;
    return 0;
}
</code></pre>
<p>The first way, just showed above, is using a function to imitate the process. However, obviously it is an ineffective way because there exist too many repeated steps. Of course there are ways to solve it, but let's see the next method first.</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int main() {
    int n;
    cin &gt;&gt; n;
    vector&lt;long long&gt; dp(n + 1);
    dp[0] = 0;
    dp[1] = 1;
    for(int i = 2; i &lt;= n; ++i) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    cout &lt;&lt; dp[n] &lt;&lt; endl;
    return 0;
}
</code></pre>
<p>The next way is using a array to imitate the solution. It seems faster than the previous method. But it has a fatal shortcoming: you must make sure that the state will increase or decrease in a fixed direction. Otherwise you cannot use this method.</p>
<h2 id="the-end">The end</h2>
<p>So this is the end of the introduction. Of course, it is just a beginning of this series. DP is an interesting subject to study. It can also be used in mathmatics, biology, economic and so on.</p>
]]></content>
    </entry>
</feed>